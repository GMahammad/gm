{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtills\";\nimport { Subject } from 'rxjs';\nimport { object } from \"prop-types\";\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"ContactMe\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.scrollToHome = () => {\n      let HomeScreen = document.getElementById(\"Home\");\n      if (!HomeScreen) return;\n      HomeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n        case \"complete\":\n          return completelyVisible;\n        default:\n          return false;\n      }\n    };\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || object.keys(event).lenght < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n  }\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","object","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","HomeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","keys","lenght","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","scrollHandler"],"sources":["C:/Users/Mehemmed/Desktop/Code{1}/GMport_new/client/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtills\";\r\nimport { Subject } from 'rxjs'\r\nimport { object } from \"prop-types\"\r\n\r\n\r\nexport default class ScrollService {\r\n    static scrollHandler = new ScrollService();\r\n    static currentScreenBroadCaster = new Subject();\r\n    static currentScreenFadeIn = new Subject();\r\n\r\n    constructor() {\r\n        window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport)\r\n    }\r\n    scrollToHireMe = () => {\r\n        let contactMeScreen = document.getElementById(\"ContactMe\")\r\n        if (!contactMeScreen) return;\r\n        contactMeScreen.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n    scrollToHome = () => {\r\n        let HomeScreen = document.getElementById(\"Home\")\r\n        if (!HomeScreen) return;\r\n        HomeScreen.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n    isElementInView = (elem, type) => {\r\n        let rec = elem.getBoundingClientRect();\r\n        let elementTop = rec.top;\r\n        let elementBottom = rec.Bottom;\r\n\r\n        let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\r\n        let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\r\n\r\n        switch (type) {\r\n            case \"partial\":\r\n                return partiallyVisible;\r\n\r\n            case \"complete\":\r\n                return completelyVisible\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n    checkCurrentScreenUnderViewport = (event) => {\r\n        if (!event || object.keys(event).lenght < 1)\r\n            return;\r\n        for (let screen of TOTAL_SCREENS) {\r\n            let screenFromDOM = document.getElementById(screen.screen_name);\r\n            if (!screenFromDOM)\r\n                continue;\r\n\r\n            let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\r\n            let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\r\n\r\n            if (fullyVisible || partiallyVisible) {\r\n                if (partiallyVisible && !screen.alreadyRendered) {\r\n                    ScrollService.currentScreenFadeIn.next({\r\n                        fadeInScreen: screen.screen_name\r\n                    });\r\n                    screen['alreadyRendered'] = true;\r\n                    break;\r\n                }\r\n                if (fullyVisible) {\r\n                    ScrollService.currentScreenBroadCaster.next({\r\n                        screenInView: screen.screen_name\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,gBAAgB;AAC9C,SAASC,OAAO,QAAQ,MAAM;AAC9B,SAASC,MAAM,QAAQ,YAAY;AAGnC,eAAe,MAAMC,aAAa,CAAC;EAK/BC,WAAWA,CAAA,EAAG;IAAA,KAGdC,cAAc,GAAG,MAAM;MACnB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;MAC1D,IAAI,CAACF,eAAe,EAAE;MACtBA,eAAe,CAACG,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IAC1D,CAAC;IAAA,KACDC,YAAY,GAAG,MAAM;MACjB,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAChD,IAAI,CAACI,UAAU,EAAE;MACjBA,UAAU,CAACH,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACrD,CAAC;IAAA,KACDG,eAAe,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAK;MAC9B,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAqB,EAAE;MACtC,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAAG;MACxB,IAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAM;MAE9B,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAAW,IAAIJ,aAAa,IAAI,CAAC;MAC5E,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAC,IAAIE,aAAa,IAAIG,MAAM,CAACC,WAAW;MAE9E,QAAQT,IAAI;QACR,KAAK,SAAS;UACV,OAAOO,gBAAgB;QAE3B,KAAK,UAAU;UACX,OAAOG,iBAAiB;QAC5B;UACI,OAAO,KAAK;MAAA;IAExB,CAAC;IAAA,KACDC,+BAA+B,GAAIC,KAAK,IAAK;MACzC,IAAI,CAACA,KAAK,IAAIzB,MAAM,CAAC0B,IAAI,CAACD,KAAK,CAAC,CAACE,MAAM,GAAG,CAAC,EACvC;MACJ,KAAK,IAAIC,MAAM,IAAI9B,aAAa,EAAE;QAC9B,IAAI+B,aAAa,GAAGxB,QAAQ,CAACC,cAAc,CAACsB,MAAM,CAACE,WAAW,CAAC;QAC/D,IAAI,CAACD,aAAa,EACd;QAEJ,IAAIE,YAAY,GAAG,IAAI,CAACpB,eAAe,CAACkB,aAAa,EAAE,UAAU,CAAC;QAClE,IAAIT,gBAAgB,GAAG,IAAI,CAACT,eAAe,CAACkB,aAAa,EAAE,SAAS,CAAC;QAErE,IAAIE,YAAY,IAAIX,gBAAgB,EAAE;UAClC,IAAIA,gBAAgB,IAAI,CAACQ,MAAM,CAACI,eAAe,EAAE;YAC7C/B,aAAa,CAACgC,mBAAmB,CAACC,IAAI,CAAC;cACnCC,YAAY,EAAEP,MAAM,CAACE;YACzB,CAAC,CAAC;YACFF,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI;YAChC;UACJ;UACA,IAAIG,YAAY,EAAE;YACd9B,aAAa,CAACmC,wBAAwB,CAACF,IAAI,CAAC;cACxCG,YAAY,EAAET,MAAM,CAACE;YACzB,CAAC,CAAC;YACF;UACJ;QACJ;MACJ;IACJ,CAAC;IAzDGT,MAAM,CAACiB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACd,+BAA+B,CAAC;EAC3E;AAyDJ;AAhEqBvB,aAAa,CACvBsC,aAAa,GAAG,IAAItC,aAAa,EAAE;AADzBA,aAAa,CAEvBmC,wBAAwB,GAAG,IAAIrC,OAAO,EAAE;AAF9BE,aAAa,CAGvBgC,mBAAmB,GAAG,IAAIlC,OAAO,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}