{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mehemmed\\\\Desktop\\\\Code{1}\\\\GMport_new\\\\client\\\\src\\\\PortfolioContainer\\\\Home\\\\Header\\\\Header.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n// import {\n//     TOTAL_SCREENS,\n//     GET_SCREEN_INDEX,\n// } from \"../../../utilities/commonUtils\";\nimport ScrollService from \"../../../utilities/ScrollService\";\n// import { faBars } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Header.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Header() {\n  _s();\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOptions, setShowHeaderOptions] = useState(false);\n\n  // const updateCurrentScreen = (currentScreen) => {\n  //     if (!currentScreen || !currentScreen.screenInView) return;\n\n  //     let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n  //     if (screenIndex < 0) return;\n  // };\n  let currentScreenSubscription = ScrollService.currentScreenBroadCaster.subscribe(updateCurrentScreen);\n  const getHeaderOptions = () => {\n    return TOTAL_SCREENS.map((Screen, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getHeaderOptionsClasses(i),\n      onClick: () => switchScreen(i, Screen),\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: Screen.screen_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, Screen.screen_name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this));\n  };\n  const getHeaderOptionsClasses = index => {\n    let classes = \"header-option \";\n    if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-seperator \";\n    if (selectedScreen === index) classes += \"selected-header-option \";\n    return classes;\n  };\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n    screenComponent.scrollIntoView({\n      behavior: \"smooth\"\n    });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n  useEffect(() => {\n    return () => {\n      currentScreenSubscription.unsubscribe();\n    };\n  }, [currentScreenSubscription]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header-container\",\n    onClick: () => setShowHeaderOptions(!showHeaderOptions),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-hamburger\",\n        onClick: () => setShowHeaderOptions(!showHeaderOptions)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"EHIZEEX~\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: showHeaderOptions ? \"header-options show-hamburger-options\" : \"header-options\",\n        children: getHeaderOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(Header, \"ujF17CXvQfKrqR4WPi1qhAXORpE=\");\n_c = Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useState","useEffect","ScrollService","jsxDEV","_jsxDEV","Header","_s","selectedScreen","setSelectedScreen","showHeaderOptions","setShowHeaderOptions","currentScreenSubscription","currentScreenBroadCaster","subscribe","updateCurrentScreen","getHeaderOptions","TOTAL_SCREENS","map","Screen","i","className","getHeaderOptionsClasses","onClick","switchScreen","children","screen_name","fileName","_jsxFileName","lineNumber","columnNumber","index","classes","length","screen","screenComponent","document","getElementById","scrollIntoView","behavior","unsubscribe","_c","$RefreshReg$"],"sources":["C:/Users/Mehemmed/Desktop/Code{1}/GMport_new/client/src/PortfolioContainer/Home/Header/Header.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//     TOTAL_SCREENS,\r\n//     GET_SCREEN_INDEX,\r\n// } from \"../../../utilities/commonUtils\";\r\nimport ScrollService from \"../../../utilities/ScrollService\";\r\n// import { faBars } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"./Header.css\";\r\n\r\nexport default function Header() {\r\n    const [selectedScreen, setSelectedScreen] = useState(0);\r\n    const [showHeaderOptions, setShowHeaderOptions] = useState(false);\r\n\r\n    // const updateCurrentScreen = (currentScreen) => {\r\n    //     if (!currentScreen || !currentScreen.screenInView) return;\r\n\r\n    //     let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\r\n    //     if (screenIndex < 0) return;\r\n    // };\r\n    let currentScreenSubscription =\r\n        ScrollService.currentScreenBroadCaster.subscribe(updateCurrentScreen);\r\n\r\n    const getHeaderOptions = () => {\r\n        return TOTAL_SCREENS.map((Screen, i) => (\r\n            <div\r\n                key={Screen.screen_name}\r\n                className={getHeaderOptionsClasses(i)}\r\n                onClick={() => switchScreen(i, Screen)}\r\n            >\r\n                <span>{Screen.screen_name}</span>\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    const getHeaderOptionsClasses = (index) => {\r\n        let classes = \"header-option \";\r\n        if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-seperator \";\r\n\r\n        if (selectedScreen === index) classes += \"selected-header-option \";\r\n\r\n        return classes;\r\n    };\r\n\r\n    const switchScreen = (index, screen) => {\r\n        let screenComponent = document.getElementById(screen.screen_name);\r\n        if (!screenComponent) return;\r\n\r\n        screenComponent.scrollIntoView({ behavior: \"smooth\" });\r\n        setSelectedScreen(index);\r\n        setShowHeaderOptions(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            currentScreenSubscription.unsubscribe();\r\n        };\r\n    }, [currentScreenSubscription]);\r\n\r\n    return (\r\n        <div\r\n            className=\"header-container\"\r\n            onClick={() => setShowHeaderOptions(!showHeaderOptions)}\r\n        >\r\n            <div className=\"header-parent\">\r\n                <div\r\n                    className=\"header-hamburger\"\r\n                    onClick={() => setShowHeaderOptions(!showHeaderOptions)}\r\n                >\r\n                {/* <FontAwesomeIcon className=\"header-hmburger-bars\" icon={faBars} /> */}\r\n                </div>\r\n                <div className=\"header-logo\">\r\n                    <span>EHIZEEX~</span>\r\n                </div>\r\n                <div\r\n                    className={\r\n                        showHeaderOptions\r\n                            ? \"header-options show-hamburger-options\"\r\n                            : \"header-options\"\r\n                    }\r\n                >\r\n                    {getHeaderOptions()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}